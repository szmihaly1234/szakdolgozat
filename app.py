# app.py
import streamlit as st
import tensorflow as tf
import numpy as np
import cv2
import matplotlib.pyplot as plt
from PIL import Image
import io
import time

# ===============================
# ALAPBE√ÅLL√çT√ÅSOK
# ===============================

st.set_page_config(
    page_title="üè† √âp√ºlet Lakoss√°gi Becsl≈ë",
    page_icon="üè†",
    layout="wide"
)

# ===============================
# MODELL BET√ñLT√âSE
# ===============================

@st.cache_resource
def load_model():
    """Modell bet√∂lt√©se cache-el√©ssel"""
    try:
        model = tf.keras.models.load_model('final_multi_task_model.h5', compile=False)
        return model
    except Exception as e:
        st.error(f"Modell bet√∂lt√©si hiba: {e}")
        return None

# ===============================
# LAKOSS√ÅGI ADATOK
# ===============================

BUILDING_TYPE_POPULATION = {
    'kis_lakohaz': 2.9,
    'kozepes_lakohaz': 3.2,
    'nagy_lakohaz': 4.1,
    'tarsashaz': 45,
    'kereskedelmi': 0,
    'ipari': 0
}

BUILDING_COLORS = {
    'kis_lakohaz': '#00FF00',      # z√∂ld
    'kozepes_lakohaz': '#FFFF00',  # s√°rga
    'nagy_lakohaz': '#FFA500',     # narancs
    'tarsashaz': '#FF0000',        # piros
    'kereskedelmi': '#0000FF',     # k√©k
    'ipari': '#800080'             # lila
}

BUILDING_LABELS = {
    'kis_lakohaz': 'Kis lak√≥h√°z (<150 m¬≤)',
    'kozepes_lakohaz': 'K√∂zepes lak√≥h√°z (150-500 m¬≤)',
    'nagy_lakohaz': 'Nagy lak√≥h√°z (500-2000 m¬≤)',
    'tarsashaz': 'T√°rsash√°z (>2000 m¬≤)',
    'kereskedelmi': 'Kereskedelmi √©p√ºlet',
    'ipari': 'Ipari √©p√ºlet'
}

# ===============================
# F≈ê FELDOLGOZ√ì FUNKCI√ìK
# ===============================

def preprocess_image(image):
    """K√©p el≈ëfeldolgoz√°sa"""
    # Konvert√°l√°s numpy array-re
    img_array = np.array(image)
    
    # RGB-re konvert√°l√°s ha sz√ºks√©ges
    if len(img_array.shape) == 3 and img_array.shape[2] == 4:
        img_array = cv2.cvtColor(img_array, cv2.COLOR_RGBA2RGB)
    elif len(img_array.shape) == 3:
        img_array = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
        img_array = cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB)
    
    # M√©ret v√°ltoztat√°s
    img_resized = cv2.resize(img_array, (256, 256), interpolation=cv2.INTER_CUBIC)
    
    # Normaliz√°l√°s
    img_normalized = img_resized.astype(np.float32) / 255.0
    
    return img_normalized, img_array

def segment_individual_buildings(mask, min_size=100):
    """Egyedi √©p√ºletek szegment√°l√°sa"""
    binary_mask = (mask > 0.5).astype(np.uint8)
    
    # Morfol√≥giai m≈±veletek
    kernel = np.ones((3,3), np.uint8)
    binary_mask = cv2.morphologyEx(binary_mask, cv2.MORPH_CLOSE, kernel)
    binary_mask = cv2.morphologyEx(binary_mask, cv2.MORPH_OPEN, kernel)
    
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(binary_mask, connectivity=8)
    
    individual_buildings = []
    
    for i in range(1, num_labels):
        building_mask = (labels == i).astype(np.uint8)
        area = stats[i, cv2.CC_STAT_AREA]
        
        if area < min_size:
            continue
            
        x, y, w, h = stats[i, cv2.CC_STAT_LEFT], stats[i, cv2.CC_STAT_TOP], stats[i, cv2.CC_STAT_WIDTH], stats[i, cv2.CC_STAT_HEIGHT]
        
        individual_buildings.append({
            'mask': building_mask,
            'area': area,
            'bbox': (x, y, w, h),
            'centroid': centroids[i],
            'label': i
        })
    
    return individual_buildings

def classify_building_by_area(area_m2):
    """√âp√ºlett√≠pus besorol√°sa ter√ºlet alapj√°n"""
    if area_m2 < 150:
        return 'kis_lakohaz'
    elif area_m2 < 500:
        return 'kozepes_lakohaz'
    elif area_m2 < 2000:
        return 'nagy_lakohaz'
    else:
        return 'tarsashaz'

def estimate_population_for_building(building_type, area):
    """Lakos sz√°m becsl√©se"""
    if building_type not in BUILDING_TYPE_POPULATION:
        return 0
        
    base_population = BUILDING_TYPE_POPULATION[building_type]
    
    if building_type in ['kis_lakohaz', 'kozepes_lakohaz', 'nagy_lakohaz']:
        estimated_apartments = max(1, area / 100)
        population = base_population * estimated_apartments
    elif building_type == 'tarsashaz':
        estimated_apartments = max(8, area / 80)
        population = base_population * (estimated_apartments / 10)
    else:
        population = base_population
        
    return round(population, 1)

def create_annotated_image(original_img, building_analysis, seg_mask):
    """Megjel√∂lt k√©p l√©trehoz√°sa"""
    result_img = original_img.copy()
    
    # Szegment√°l√°s overlay
    seg_colored = np.zeros_like(original_img)
    seg_colored[seg_mask > 0.5] = [255, 0, 0]  # piros
    result_img = cv2.addWeighted(result_img, 0.7, seg_colored, 0.3, 0)
    
    # Bounding box-ok √©s c√≠mk√©k
    for building in building_analysis:
        x, y, w, h = building['bbox']
        
        # Sz√≠n kiv√°laszt√°sa
        color_name = BUILDING_COLORS[building['type']]
        color_rgb = tuple(int(color_name[i:i+2], 16) for i in (1, 3, 5))
        
        # Bounding box
        cv2.rectangle(result_img, (x, y), (x + w, y + h), color_rgb, 3)
        
        # C√≠mke h√°tt√©r
        label = f"{building['type']} ({building['population']} f≈ë)"
        label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 2)[0]
        cv2.rectangle(result_img, (x, y - label_size[1] - 10), 
                     (x + label_size[0], y), color_rgb, -1)
        
        # C√≠mke sz√∂veg
        cv2.putText(result_img, label, (x, y - 5), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
    
    return result_img

# ===============================
# STREAMLIT ALKALMAZ√ÅS
# ===============================

def main():
    st.title("üè† √âp√ºlet Lakoss√°gi Becsl≈ë")
    st.markdown("""
    T√∂lts fel egy m≈±holdk√©pet vagy l√©gifot√≥t, √©s az AI modell megmondja, 
    **h√°ny ember lakhat** a k√©pen l√°that√≥ √©p√ºletekben!
    """)
    
    # Oldals√°v be√°ll√≠t√°sok
    st.sidebar.header("‚öôÔ∏è Be√°ll√≠t√°sok")
    
    pixel_to_meter = st.sidebar.slider(
        "Pixel/m√©ter ar√°ny",
        min_value=0.1,
        max_value=2.0,
        value=0.5,
        help="Mennyi m√©ter egy pixel a k√©pen"
    )
    
    min_building_size = st.sidebar.slider(
        "Minimum √©p√ºlet m√©ret (px)",
        min_value=50,
        max_value=500,
        value=100,
        help="A kisebb objektumok figyelmen k√≠v√ºl maradnak"
    )
    
    # Modell bet√∂lt√©se
    model = load_model()
    
    if model is None:
        st.warning("""
        ‚ö†Ô∏è A modell f√°jl nem tal√°lhat√≥. 
        Gy≈ëz≈ëdj meg r√≥la, hogy a `final_multi_task_model.h5` f√°jl megtal√°lhat√≥ a mapp√°ban.
        """)
        return
    
    # K√©p felt√∂lt√©se
    uploaded_file = st.file_uploader(
        "üì§ T√∂lts fel egy k√©pet",
        type=['jpg', 'jpeg', 'png', 'bmp'],
        help="M≈±holdk√©p vagy l√©gifot√≥ √©p√ºletekkel"
    )
    
    if uploaded_file is not None:
        # K√©p megjelen√≠t√©se
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üì∑ Felt√∂lt√∂tt k√©p")
            image = Image.open(uploaded_file)
            st.image(image, use_column_width=True)
        
        # Elemz√©s ind√≠t√°sa
        if st.button("üöÄ Elemz√©s ind√≠t√°sa", type="primary"):
            with st.spinner("üîç K√©p elemz√©se folyamatban..."):
                try:
                    # K√©p el≈ëfeldolgoz√°sa
                    img_processed, original_img = preprocess_image(image)
                    img_input = np.expand_dims(img_processed, axis=0)
                    
                    # El≈ërejelz√©s
                    start_time = time.time()
                    seg_pred, class_pred = model.predict(img_input, verbose=0)
                    inference_time = time.time() - start_time
                    
                    # Szegment√°l√°s eredm√©nye
                    original_height, original_width = original_img.shape[:2]
                    seg_mask = cv2.resize(seg_pred[0,:,:,0], (original_width, original_height))
                    
                    # Egyedi √©p√ºletek szegment√°l√°sa
                    individual_buildings = segment_individual_buildings(seg_mask, min_building_size)
                    
                    # √âp√ºletenk√©nti elemz√©s
                    building_analysis = []
                    total_population = 0
                    total_area = 0
                    
                    for i, building in enumerate(individual_buildings):
                        area_pixels = building['area']
                        area_m2 = area_pixels * (pixel_to_meter ** 2)
                        
                        building_type = classify_building_by_area(area_m2)
                        population = estimate_population_for_building(building_type, area_m2)
                        
                        total_population += population
                        total_area += area_m2
                        
                        building_analysis.append({
                            'id': i + 1,
                            'type': building_type,
                            'area_m2': round(area_m2, 1),
                            'population': population,
                            'bbox': building['bbox']
                        })
                    
                    # Eredm√©ny k√©p gener√°l√°sa
                    annotated_image = create_annotated_image(original_img, building_analysis, seg_mask)
                    
                    # Statisztik√°k sz√°m√≠t√°sa
                    building_type_stats = {}
                    for building in building_analysis:
                        b_type = building['type']
                        if b_type not in building_type_stats:
                            building_type_stats[b_type] = {'count': 0, 'total_population': 0}
                        building_type_stats[b_type]['count'] += 1
                        building_type_stats[b_type]['total_population'] += building['population']
                    
                    # Eredm√©nyek megjelen√≠t√©se
                    with col2:
                        st.subheader("üìä Elemz√©s eredm√©nye")
                        st.image(annotated_image, use_column_width=True)
                    
                    # F≈ë metrik√°k
                    st.success(f"‚úÖ Elemz√©s k√©sz! Feldolgoz√°si id≈ë: {inference_time:.2f} m√°sodperc")
                    
                    # Metrik√°k
                    col3, col4, col5, col6 = st.columns(4)
                    
                    with col3:
                        st.metric(
                            "üè¢ √âp√ºletek sz√°ma",
                            f"{len(building_analysis)} db"
                        )
                    
                    with col4:
                        st.metric(
                            "üë• Becs√ºlt lakoss√°g",
                            f"{total_population:.0f} f≈ë"
                        )
                    
                    with col5:
                        st.metric(
                            "üìè √ñsszes ter√ºlet",
                            f"{total_area:.0f} m¬≤"
                        )
                    
                    with col6:
                        avg_pop = total_population / len(building_analysis) if building_analysis else 0
                        st.metric(
                            "üìê √Åtlag/√©p√ºlet",
                            f"{avg_pop:.1f} f≈ë"
                        )
                    
                    # R√©szletes eredm√©nyek
                    st.subheader("üìà R√©szletes elemz√©s")
                    
                    # √âp√ºlett√≠pusok szerinti bont√°s
                    if building_type_stats:
                        types_col, pop_col = st.columns(2)
                        
                        with types_col:
                            st.write("**√âp√ºlett√≠pusok eloszl√°sa:**")
                            for b_type, stats in building_type_stats.items():
                                color = BUILDING_COLORS[b_type]
                                label = BUILDING_LABELS[b_type]
                                st.markdown(
                                    f"<span style='color:{color}; font-weight:bold'>‚ñ†</span> "
                                    f"{label}: {stats['count']} db",
                                    unsafe_allow_html=True
                                )
                        
                        with pop_col:
                            st.write("**Lakoss√°g eloszl√°sa:**")
                            for b_type, stats in building_type_stats.items():
                                color = BUILDING_COLORS[b_type]
                                label = BUILDING_LABELS[b_type]
                                st.markdown(
                                    f"<span style='color:{color}; font-weight:bold'>‚ñ†</span> "
                                    f"{label}: {stats['total_population']:.1f} f≈ë",
                                    unsafe_allow_html=True
                                )
                    
                    # √âp√ºlet lista
                    st.subheader("üè† √âp√ºlet lista")
                    if building_analysis:
                        for building in building_analysis:
                            color = BUILDING_COLORS[building['type']]
                            label = BUILDING_LABELS[building['type']]
                            
                            with st.expander(f"√âp√ºlet {building['id']} - {label}"):
                                col7, col8, col9 = st.columns(3)
                                with col7:
                                    st.write(f"**Ter√ºlet:** {building['area_m2']} m¬≤")
                                with col8:
                                    st.write(f"**Lakoss√°g:** {building['population']} f≈ë")
                                with col9:
                                    st.write(f"**T√≠pus:** {label}")
                    
                    # Sz√≠njelmagyar√°zat
                    st.subheader("üé® Jelmagyar√°zat")
                    legend_cols = st.columns(3)
                    color_items = list(BUILDING_LABELS.items())
                    
                    for i, (b_type, label) in enumerate(color_items):
                        with legend_cols[i % 3]:
                            color = BUILDING_COLORS[b_type]
                            st.markdown(
                                f"<span style='color:{color}; font-size:20px'>‚ñ†</span> "
                                f"**{label}**",
                                unsafe_allow_html=True
                            )
                    
                except Exception as e:
                    st.error(f"‚ùå Hiba t√∂rt√©nt az elemz√©s sor√°n: {e}")
                    st.info("Pr√≥b√°lj meg egy m√°sik k√©pet felt√∂lteni!")

    else:
        # √ötmutat√≥
        st.info("""
        ### üìù Haszn√°lati √∫tmutat√≥:
        
        1. **K√©p felt√∂lt√©se**: T√∂lts fel egy m≈±holdk√©pet vagy l√©gifot√≥t √©p√ºletekkel
        2. **Be√°ll√≠t√°sok**: √Åll√≠tsd be a pixel/m√©ter ar√°nyt az oldals√°vban
        3. **Elemz√©s**: Kattints az "Elemz√©s ind√≠t√°sa" gombra
        4. **Eredm√©ny**: N√©zd meg a becs√ºlt lakoss√°got √©s az √©p√ºlet elemz√©st
        
        ### üí° Tippek:
        - A legjobb eredm√©nyek√©rt haszn√°lj **vil√°gos, kontrasztos** k√©peket
        - **M≈±holdk√©pek** a legalkalmasabbak
        - A pixel/m√©ter ar√°nyt a k√©p felbont√°sa alapj√°n √°ll√≠tsd be
        """)

if __name__ == "__main__":
    main()
