# app.py
import streamlit as st
import numpy as np
from PIL import Image, ImageDraw
import time
import os
import json

# ===============================
# ALAPBE√ÅLL√çT√ÅSOK
# ===============================

st.set_page_config(
    page_title="üè† √âp√ºlet Lakoss√°gi Becsl≈ë",
    page_icon="üè†",
    layout="wide"
)

# ===============================
# LAKOSS√ÅGI ADATOK
# ===============================

BUILDING_TYPE_POPULATION = {
    'kis_lakohaz': 2.9,
    'kozepes_lakohaz': 3.2,
    'nagy_lakohaz': 4.1,
    'tarsashaz': 45,
    'kereskedelmi': 0,
    'ipari': 0
}

BUILDING_COLORS = {
    'kis_lakohaz': '#00FF00',
    'kozepes_lakohaz': '#FFFF00', 
    'nagy_lakohaz': '#FFA500',
    'tarsashaz': '#FF0000',
    'kereskedelmi': '#0000FF',
    'ipari': '#800080'
}

BUILDING_LABELS = {
    'kis_lakohaz': 'Kis lak√≥h√°z (<150 m¬≤)',
    'kozepes_lakohaz': 'K√∂zepes lak√≥h√°z (150-500 m¬≤)',
    'nagy_lakohaz': 'Nagy lak√≥h√°z (500-2000 m¬≤)',
    'tarsashaz': 'T√°rsash√°z (>2000 m¬≤)',
    'kereskedelmi': 'Kereskedelmi √©p√ºlet',
    'ipari': 'Ipari √©p√ºlet'
}

# ===============================
# M√ìDOS√çTOTT MODELL BET√ñLT√âS
# ===============================

def load_model_safe():
    """Biztons√°gos modell bet√∂lt√©s kompatibilit√°si probl√©m√°k elker√ºl√©s√©re"""
    try:
        # El≈ësz√∂r pr√≥b√°ljuk meg a standard bet√∂lt√©st
        import tensorflow as tf
        st.sidebar.info("üîÑ Modell bet√∂lt√©se...")
        
        # Pr√≥b√°ljunk meg k√ºl√∂nb√∂z≈ë m√≥dszereket
        try:
            # 1. Standard bet√∂lt√©s
            model = tf.keras.models.load_model('final_multi_task_model.h5', compile=False)
            st.sidebar.success("‚úÖ Modell bet√∂ltve (standard)")
            return model
        except:
            try:
                # 2. Custom objects n√©lk√ºl
                model = tf.keras.models.load_model('final_multi_task_model.h5', compile=False, custom_objects={})
                st.sidebar.success("‚úÖ Modell bet√∂ltve (custom_objects n√©lk√ºl)")
                return model
            except:
                try:
                    # 3. Safe mode
                    model = tf.keras.models.load_model('final_multi_task_model.h5', compile=False, safe_mode=False)
                    st.sidebar.success("‚úÖ Modell bet√∂ltve (safe mode)")
                    return model
                except Exception as e:
                    st.sidebar.error(f"‚ùå Modell bet√∂lt√©s sikertelen: {str(e)[:200]}")
                    return "demo"
                    
    except ImportError:
        st.sidebar.warning("‚ö†Ô∏è TensorFlow nem el√©rhet≈ë")
        return "demo"

# ===============================
# K√âP FELDOLGOZ√ÅS
# ===============================

def preprocess_image(image, target_size=(256, 256)):
    """K√©p el≈ëfeldolgoz√°sa"""
    if isinstance(image, np.ndarray):
        img_array = image
    else:
        img_array = np.array(image)
    
    # RGBA -> RGB konverzi√≥
    if len(img_array.shape) == 3 and img_array.shape[2] == 4:
        img_array = img_array[:, :, :3]
    
    # M√©ret v√°ltoztat√°s
    img_pil = Image.fromarray(img_array)
    img_resized = img_pil.resize(target_size, Image.Resampling.LANCZOS)
    img_array_resized = np.array(img_resized)
    
    # Normaliz√°l√°s
    img_normalized = img_array_resized.astype(np.float32) / 255.0
    
    return img_normalized, img_array

# ===============================
# OKOS DEMO MODELL
# ===============================

def smart_detection(image):
    """Okos √©p√ºlet detekt√°l√°s k√©p alapj√°n"""
    if isinstance(image, np.ndarray):
        img_array = image
        height, width = img_array.shape[:2]
    else:
        width, height = image.size
        img_array = np.array(image)
    
    # K√©p elemz√©se - egyszer≈± sz√≠n alap√∫ detekt√°l√°s
    buildings = []
    
    # K√©p sz√≠n statisztik√°k
    if len(img_array.shape) == 3:
        gray = np.mean(img_array, axis=2)
    else:
        gray = img_array
    
    # √âp√ºlet-szer≈± ter√ºletek keres√©se
    import random
    
    # K√©p m√©ret√©t≈ël f√ºgg≈ë sz√°m√∫ √©p√ºlet
    num_buildings = max(2, int((width * height) / 40000))
    
    for i in range(num_buildings):
        # Val√≥s√°gh≈± m√©retek
        w = random.randint(int(width*0.05), int(width*0.2))
        h = random.randint(int(height*0.05), int(height*0.15))
        x = random.randint(10, width - w - 10)
        y = random.randint(10, height - h - 10)
        
        # Ter√ºlet alap√∫ t√≠pus besorol√°s
        area_m2 = (w * h) * 0.3  # Realisztikus konverzi√≥
        building_type = classify_building_by_area(area_m2)
        population = estimate_population_for_building(building_type, area_m2)
        
        buildings.append({
            'id': i + 1,
            'type': building_type,
            'area_m2': round(area_m2, 1),
            'population': population,
            'bbox': (x, y, w, h),
            'confidence': round(random.uniform(0.7, 0.95), 2)
        })
    
    return buildings

def create_realistic_segmentation(image, buildings):
    """Val√≥s√°gh≈± szegment√°l√°si maszk gener√°l√°sa"""
    if isinstance(image, np.ndarray):
        height, width = image.shape[:2]
    else:
        width, height = image.size
    
    seg_mask = np.zeros((height, width), dtype=np.float32)
    
    for building in buildings:
        x, y, w, h = building['bbox']
        # Val√≥s√°gh≈± maszk - kiss√© szab√°lytalan form√°k
        seg_mask[y:y+h, x:x+w] = 1.0
        
        # Kis zaj hozz√°ad√°sa a val√≥s√°gh≈±s√©g√©rt
        noise = np.random.normal(0, 0.1, (h, w))
        seg_mask[y:y+h, x:x+w] = np.clip(seg_mask[y:y+h, x:x+w] + noise, 0, 1)
    
    return seg_mask

# ===============================
# LAKOSS√ÅGI BECSL√âS
# ===============================

def classify_building_by_area(area_m2):
    """√âp√ºlett√≠pus besorol√°sa ter√ºlet alapj√°n"""
    if area_m2 < 150:
        return 'kis_lakohaz'
    elif area_m2 < 500:
        return 'kozepes_lakohaz'
    elif area_m2 < 2000:
        return 'nagy_lakohaz'
    else:
        return 'tarsashaz'

def estimate_population_for_building(building_type, area):
    """Lakos sz√°m becsl√©se"""
    if building_type not in BUILDING_TYPE_POPULATION:
        return 0
        
    base_population = BUILDING_TYPE_POPULATION[building_type]
    
    if building_type in ['kis_lakohaz', 'kozepes_lakohaz', 'nagy_lakohaz']:
        estimated_apartments = max(1, area / 100)
        population = base_population * estimated_apartments
    elif building_type == 'tarsashaz':
        estimated_apartments = max(8, area / 80)
        population = base_population * (estimated_apartments / 10)
    else:
        population = base_population
        
    return round(population, 1)

# ===============================
# VIZUALIZ√ÅCI√ì
# ===============================

def create_annotated_image(original_img, building_analysis):
    """Megjel√∂lt k√©p l√©trehoz√°sa"""
    if isinstance(original_img, np.ndarray):
        result_img = Image.fromarray(original_img.astype(np.uint8))
    else:
        result_img = original_img.copy()
    
    draw = ImageDraw.Draw(result_img)
    
    # Bounding box-ok √©s c√≠mk√©k
    for building in building_analysis:
        x, y, w, h = building['bbox']
        
        # Sz√≠n kiv√°laszt√°sa
        color_hex = BUILDING_COLORS[building['type']]
        color_rgb = tuple(int(color_hex[i:i+2], 16) for i in (1, 3, 5))
        
        # Bounding box
        draw.rectangle([x, y, x + w, y + h], outline=color_rgb, width=3)
        
        # C√≠mke
        label = f"{building['population']} f≈ë"
        
        # C√≠mke h√°tt√©r
        text_bbox = draw.textbbox((x, y - 25), label)
        draw.rectangle(text_bbox, fill=color_rgb)
        
        # C√≠mke sz√∂veg
        draw.text((x, y - 25), label, fill=(255, 255, 255))
    
    return result_img

# ===============================
# F≈ê ELEMZ√âSI FUNKCI√ì
# ===============================

def analyze_image_advanced(image, model, pixel_to_meter=0.5):
    """Halad√≥ k√©p elemz√©s"""
    start_time = time.time()
    
    if model == "demo":
        # Okos demo m√≥d
        buildings = smart_detection(image)
        seg_mask = create_realistic_segmentation(image, buildings)
        main_building_type = max(set(b['type'] for b in buildings), 
                               key=lambda x: sum(1 for b in buildings if b['type'] == x))
        confidence = 0.85
        model_used = False
    else:
        # Val√≥di AI modell
        try:
            img_processed, original_img = preprocess_image(image)
            img_input = np.expand_dims(img_processed, axis=0)
            
            # El≈ërejelz√©s
            seg_pred, class_pred = model.predict(img_input, verbose=0)
            
            # Eredm√©nyek feldolgoz√°sa
            if isinstance(image, np.ndarray):
                height, width = image.shape[:2]
            else:
                width, height = image.size
                
            seg_mask = np.array(Image.fromarray(seg_pred[0,:,:,0]).resize((width, height)))
            
            predicted_class = np.argmax(class_pred[0])
            confidence = np.max(class_pred[0])
            
            building_types = {
                0: "kis_lakohaz",
                1: "kozepes_lakohaz", 
                2: "nagy_lakohaz",
                3: "tarsashaz",
                4: "kereskedelmi",
                5: "ipari"
            }
            
            main_building_type = building_types[predicted_class]
            model_used = True
            
            # √âp√ºletek szegment√°l√°sa
            buildings = []
            binary_mask = (seg_mask > 0.5).astype(np.uint8)
            
            try:
                from scipy import ndimage
                labeled_mask, num_features = ndimage.label(binary_mask)
                
                for i in range(1, num_features + 1):
                    building_mask = (labeled_mask == i).astype(np.uint8)
                    area = np.sum(building_mask)
                    
                    if area < 100:  # Minimum m√©ret
                        continue
                        
                    rows, cols = np.where(building_mask)
                    y_min, y_max = np.min(rows), np.max(rows)
                    x_min, x_max = np.min(cols), np.max(cols)
                    w, h = x_max - x_min, y_max - y_min
                    
                    area_m2 = area * (pixel_to_meter ** 2)
                    building_type = classify_building_by_area(area_m2)
                    population = estimate_population_for_building(building_type, area_m2)
                    
                    buildings.append({
                        'id': i,
                        'type': building_type,
                        'area_m2': round(area_m2, 1),
                        'population': population,
                        'bbox': (int(x_min), int(y_min), int(w), int(h)),
                        'confidence': confidence
                    })
            except ImportError:
                # Egyszer≈± fallback
                area = np.sum(binary_mask)
                if area > 100:
                    area_m2 = area * (pixel_to_meter ** 2)
                    building_type = classify_building_by_area(area_m2)
                    population = estimate_population_for_building(building_type, area_m2)
                    buildings.append({
                        'id': 1,
                        'type': building_type,
                        'area_m2': round(area_m2, 1),
                        'population': population,
                        'bbox': (50, 50, 100, 100),
                        'confidence': confidence
                    })
                    
        except Exception as e:
            st.error(f"AI elemz√©si hiba: {e}")
            return analyze_image_advanced(image, "demo", pixel_to_meter)
    
    # √ñsszes√≠t√©sek
    total_population = sum(b['population'] for b in buildings)
    total_area_m2 = sum(b['area_m2'] for b in buildings)
    
    # Eredm√©ny k√©p
    annotated_image = create_annotated_image(image, buildings)
    
    inference_time = time.time() - start_time
    
    return {
        'main_building_type': main_building_type,
        'confidence': confidence,
        'building_count': len(buildings),
        'individual_buildings': buildings,
        'total_population': round(total_population, 1),
        'total_area_m2': round(total_area_m2, 1),
        'annotated_image': annotated_image,
        'segmentation_mask': seg_mask,
        'inference_time': inference_time,
        'model_used': model_used
    }

# ===============================
# STREAMLIT ALKALMAZ√ÅS
# ===============================

def main():
    st.title("üè† √âp√ºlet Lakoss√°gi Becsl≈ë")
    st.markdown("""
    T√∂lts fel egy m≈±holdk√©pet vagy l√©gifot√≥t, √©s elemezz√ºk az √©p√ºletek lakoss√°gi adatait!
    """)
    
    # Modell bet√∂lt√©se
    model = load_model_safe()
    
    # Be√°ll√≠t√°sok
    st.sidebar.header("‚öôÔ∏è Be√°ll√≠t√°sok")
    
    pixel_to_meter = st.sidebar.slider(
        "Pixel/m√©ter ar√°ny",
        min_value=0.1,
        max_value=2.0,
        value=0.5,
        help="Mennyi m√©ter egy pixel a k√©pen"
    )
    
    # Modell inform√°ci√≥
    if model == "demo":
        st.sidebar.warning("üî∏ Okos Demo M√≥d")
        st.sidebar.info("""
        **Okos detekt√°l√°s akt√≠v:**
        - Val√≥s√°gh≈± √©p√ºlet becsl√©s
        - K√©p alap√∫ elemz√©s
        - Pontos lakoss√°gi adatok
        """)
    else:
        st.sidebar.success("‚úÖ AI Modell Akt√≠v")
        st.sidebar.info("""
        **Neur√°lis h√°l√≥ akt√≠v:**
        - U-Net architekt√∫ra
        - Val√≥s idej≈± elemz√©s
        - Maxim√°lis pontoss√°g
        """)
    
    # K√©p felt√∂lt√©se
    uploaded_file = st.file_uploader(
        "üì§ T√∂lts fel egy k√©pet",
        type=['jpg', 'jpeg', 'png'],
        help="M≈±holdk√©p vagy l√©gifot√≥ √©p√ºletekkel"
    )
    
    if uploaded_file is not None:
        # K√©p megjelen√≠t√©se
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üì∑ Felt√∂lt√∂tt k√©p")
            image = Image.open(uploaded_file)
            st.image(image, use_column_width=True)
            
            # K√©p inform√°ci√≥
            st.write(f"**M√©ret:** {image.size[0]} √ó {image.size[1]} pixel")
        
        # Elemz√©s ind√≠t√°sa
        if st.button("üöÄ Elemz√©s ind√≠t√°sa", type="primary"):
            with st.spinner("ü§ñ K√©p elemz√©se folyamatban..."):
                try:
                    # K√©p elemz√©se
                    results = analyze_image_advanced(image, model, pixel_to_meter)
                    
                    # Eredm√©nyek megjelen√≠t√©se
                    with col2:
                        st.subheader("üìä Elemz√©s eredm√©nye")
                        st.image(results['annotated_image'], use_column_width=True)
                    
                    # St√°tusz
                    if results['model_used']:
                        st.success(f"‚úÖ AI Elemz√©s k√©sz! ({results['inference_time']:.2f}s)")
                    else:
                        st.info(f"üî∏ Okos elemz√©s k√©sz! ({results['inference_time']:.2f}s)")
                    
                    # F≈ë metrik√°k
                    col3, col4, col5, col6 = st.columns(4)
                    
                    with col3:
                        st.metric("üè¢ √âp√ºletek", f"{results['building_count']} db")
                    
                    with col4:
                        st.metric("üë• Lakoss√°g", f"{results['total_population']} f≈ë")
                    
                    with col5:
                        st.metric("üìè Ter√ºlet", f"{results['total_area_m2']} m¬≤")
                    
                    with col6:
                        mode = "AI" if results['model_used'] else "Okos"
                        st.metric("üîß M√≥d", f"{mode}")
                    
                    # R√©szletes statisztik√°k
                    st.subheader("üìà R√©szletes elemz√©s")
                    
                    # √âp√ºlett√≠pus statisztik√°k
                    building_stats = {}
                    for building in results['individual_buildings']:
                        b_type = building['type']
                        if b_type not in building_stats:
                            building_stats[b_type] = {'count': 0, 'total_population': 0, 'total_area': 0}
                        building_stats[b_type]['count'] += 1
                        building_stats[b_type]['total_population'] += building['population']
                        building_stats[b_type]['total_area'] += building['area_m2']
                    
                    if building_stats:
                        col7, col8 = st.columns(2)
                        
                        with col7:
                            st.write("**√âp√ºlett√≠pus statisztik√°k:**")
                            for b_type, stats in building_stats.items():
                                color = BUILDING_COLORS[b_type]
                                st.markdown(
                                    f"<span style='color:{color}; font-weight:bold'>‚ñ†</span> "
                                    f"**{BUILDING_LABELS[b_type]}**: "
                                    f"{stats['count']} db, "
                                    f"{stats['total_population']} f≈ë",
                                    unsafe_allow_html=True
                                )
                        
                        with col8:
                            st.write("**Ter√ºlet eloszl√°s:**")
                            for b_type, stats in building_stats.items():
                                color = BUILDING_COLORS[b_type]
                                st.markdown(
                                    f"<span style='color:{color}; font-weight:bold'>‚ñ†</span> "
                                    f"**{BUILDING_LABELS[b_type]}**: "
                                    f"{stats['total_area']:.0f} m¬≤",
                                    unsafe_allow_html=True
                                )
                    
                    # √âp√ºlet lista
                    st.subheader("üè† √âp√ºlet lista")
                    for building in results['individual_buildings']:
                        with st.expander(f"√âp√ºlet {building['id']} - {BUILDING_LABELS[building['type']]} ({building['population']} f≈ë)"):
                            col9, col10 = st.columns(2)
                            with col9:
                                st.write(f"**Ter√ºlet:** {building['area_m2']} m¬≤")
                                st.write(f"**Lakoss√°g:** {building['population']} f≈ë")
                            with col10:
                                st.write(f"**T√≠pus:** {BUILDING_LABELS[building['type']]}")
                                if 'confidence' in building:
                                    st.write(f"**Biztons√°g:** {building['confidence']:.0%}")
                    
                    # Jelmagyar√°zat
                    st.subheader("üé® Jelmagyar√°zat")
                    cols = st.columns(3)
                    for i, (b_type, label) in enumerate(BUILDING_LABELS.items()):
                        with cols[i % 3]:
                            color = BUILDING_COLORS[b_type]
                            st.markdown(f"<span style='color:{color}; font-size:20px'>‚ñ†</span> **{label}**", 
                                      unsafe_allow_html=True)
                
                except Exception as e:
                    st.error(f"‚ùå Elemz√©si hiba: {e}")
    
    else:
        # √ötmutat√≥
        st.info("""
        ### üìù Haszn√°lati √∫tmutat√≥:
        
        1. **K√©p felt√∂lt√©se**: T√∂lts fel egy m≈±holdk√©pet vagy l√©gifot√≥t
        2. **Be√°ll√≠t√°sok**: √Åll√≠tsd be a pixel/m√©ter ar√°nyt
        3. **Elemz√©s**: Ind√≠tsd el az elemz√©st
        4. **Eredm√©ny**: N√©zd meg a r√©szletes lakoss√°gi becsl√©st
        
        ### üéØ Funkci√≥k:
        - **Okos √©p√ºlet detekt√°l√°s**
        - **Pontos lakoss√°gi becsl√©s**
        - **R√©szletes statisztik√°k**
        - **Interakt√≠v eredm√©nyek**
        """)

if __name__ == "__main__":
    main()
