# ===============================
# STREAMLIT √âP√úLET ANALIZ√ÅTOR ALKALMAZ√ÅS
# Python 3.10 + TensorFlow 2.14 kompatibilis
# ===============================

import streamlit as st
import tensorflow as tf
from tensorflow.keras import layers, models, backend as K
import numpy as np
import cv2
import matplotlib.pyplot as plt
from PIL import Image
import io
import time
import os

# Streamlit oldal be√°ll√≠t√°sok
st.set_page_config(
    page_title="√âp√ºlet Analiz√°tor",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===============================
# LAKOSS√ÅGI ADATOK √âP√úLETT√çPUSONK√âNT
# ===============================

BUILDING_TYPE_POPULATION = {
    'kis_lakohaz': 2.9,      # √°tlagos h√°ztart√°sm√©ret
    'kozepes_lakohaz': 3.2,  # nagyobb csal√°dok
    'nagy_lakohaz': 4.1,     # t√∂bbgener√°ci√≥s
    'tarsashaz': 45,         # √°tlagos lak√≥sz√°m t√°rsash√°zban
    'kereskedelmi': 0,       # nem lak√≥√©p√ºlet
    'ipari': 0               # nem lak√≥√©p√ºlet
}

BUILDING_COLORS = {
    'kis_lakohaz': [0, 255, 0],      # z√∂ld
    'kozepes_lakohaz': [255, 255, 0], # s√°rga
    'nagy_lakohaz': [255, 165, 0],    # narancs
    'tarsashaz': [255, 0, 0],         # piros
    'kereskedelmi': [0, 0, 255],      # k√©k
    'ipari': [128, 0, 128]            # lila
}

# ===============================
# MODELL BET√ñLT√âS √âS ANAL√çZIS
# ===============================

@st.cache_resource(show_spinner=False)
def load_model():
    """Modell bet√∂lt√©se cache-el√©ssel"""
    try:
        # Dice coefficient √©s loss f√ºggv√©nyek defini√°l√°sa
        def dice_coef(y_true, y_pred):
            smooth = 1.0
            y_true_f = K.flatten(y_true)
            y_pred_f = K.flatten(y_pred)
            intersection = K.sum(y_true_f * y_pred_f)
            return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)

        def dice_loss(y_true, y_pred):
            return 1 - dice_coef(y_true, y_pred)

        # Modell bet√∂lt√©se custom objektumokkal
        model = tf.keras.models.load_model(
            'final_multi_task_model.h5',
            custom_objects={
                'dice_loss': dice_loss,
                'dice_coef': dice_coef
            }
        )
        return model
    except Exception as e:
        st.error(f"‚ùå Modell bet√∂lt√©si hiba: {e}")
        return None

def segment_individual_buildings(mask, min_size=100):
    """Egyedi √©p√ºletek szegment√°l√°sa connected components alapj√°n"""
    binary_mask = (mask > 0.5).astype(np.uint8)
    
    # Connected components
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(binary_mask, connectivity=8)
    
    individual_buildings = []
    
    for i in range(1, num_labels):  # 0 a h√°tt√©r
        building_mask = (labels == i).astype(np.uint8)
        area = stats[i, cv2.CC_STAT_AREA]
        
        if area < min_size:
            continue
            
        x, y, w, h = stats[i, cv2.CC_STAT_LEFT], stats[i, cv2.CC_STAT_TOP], stats[i, cv2.CC_STAT_WIDTH], stats[i, cv2.CC_STAT_HEIGHT]
        
        individual_buildings.append({
            'mask': building_mask,
            'area': area,
            'bbox': (x, y, w, h),
            'centroid': centroids[i],
            'label': i
        })
    
    return individual_buildings

def estimate_building_type_from_area(area_m2):
    """√âp√ºlett√≠pus becsl√©se ter√ºlet alapj√°n"""
    if area_m2 < 150:
        return 'kis_lakohaz'
    elif area_m2 < 500:
        return 'kozepes_lakohaz'
    elif area_m2 < 2000:
        return 'nagy_lakohaz'
    else:
        return 'tarsashaz'

def estimate_population_for_building(building_type, area):
    """Lakos sz√°m becsl√©se √©p√ºlett√≠pus √©s ter√ºlet alapj√°n"""
    if building_type not in BUILDING_TYPE_POPULATION:
        return 0
        
    base_population = BUILDING_TYPE_POPULATION[building_type]
    
    # Lak√≥√©p√ºletekn√©l ter√ºlet alap√∫ pontos√≠t√°s
    if building_type in ['kis_lakohaz', 'kozepes_lakohaz', 'nagy_lakohaz']:
        estimated_apartments = max(1, area / 100)
        population = base_population * estimated_apartments
    elif building_type == 'tarsashaz':
        estimated_apartments = max(8, area / 80)
        population = base_population * (estimated_apartments / 10)
    else:
        population = base_population
        
    return round(population, 1)

def analyze_image_with_model(model, image, pixel_to_meter=0.5):
    """K√©p elemz√©se a modelllel"""
    try:
        # K√©p el≈ëk√©sz√≠t√©se
        original_img = np.array(image)
        if len(original_img.shape) == 2:  # Ha fekete-feh√©r
            original_img = cv2.cvtColor(original_img, cv2.COLOR_GRAY2RGB)
        elif original_img.shape[2] == 4:  # Ha RGBA
            original_img = cv2.cvtColor(original_img, cv2.COLOR_RGBA2RGB)
        
        original_shape = original_img.shape[:2]
        
        # √Åtm√©retez√©s a modell sz√°m√°ra
        img_resized = cv2.resize(original_img, (256, 256))
        img_input = img_resized.astype(np.float32) / 255.0
        img_input = np.expand_dims(img_input, axis=0)
        
        # El≈ërejelz√©s
        start_time = time.time()
        seg_pred, class_pred = model.predict(img_input, verbose=0)
        inference_time = time.time() - start_time
        
        # Szegment√°l√°s eredm√©nye
        seg_mask = cv2.resize(seg_pred[0,:,:,0], (original_shape[1], original_shape[0]))
        
        # Egyedi √©p√ºletek szegment√°l√°sa
        individual_buildings = segment_individual_buildings(seg_mask)
        
        # √âp√ºletenk√©nti elemz√©s
        building_analysis = []
        total_population = 0
        
        for i, building in enumerate(individual_buildings):
            # √âp√ºlet ter√ºlete (m¬≤-ben)
            area_pixels = building['area']
            area_m2 = area_pixels * (pixel_to_meter ** 2)
            
            # √âp√ºlett√≠pus becsl√©se ter√ºlet alapj√°n
            building_type = estimate_building_type_from_area(area_m2)
            
            # Lakoss√°gi becsl√©s
            population = estimate_population_for_building(building_type, area_m2)
            total_population += population
            
            building_analysis.append({
                'id': i + 1,
                'type': building_type,
                'area_m2': round(area_m2, 1),
                'population': population,
                'bbox': building['bbox']
            })
        
        return {
            'success': True,
            'original_image': original_img,
            'segmentation_mask': seg_mask,
            'individual_buildings': building_analysis,
            'total_population': total_population,
            'inference_time': inference_time,
            'building_count': len(building_analysis)
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

def create_visualization(result):
    """Vizu√°lis eredm√©nyek l√©trehoz√°sa"""
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    
    # Eredeti k√©p
    axes[0,0].imshow(result['original_image'])
    axes[0,0].set_title('Eredeti k√©p')
    axes[0,0].axis('off')
    
    # Szegment√°l√°s
    axes[0,1].imshow(result['segmentation_mask'], cmap='jet')
    axes[0,1].set_title('√âp√ºlet szegment√°l√°s')
    axes[0,1].axis('off')
    
    # √âp√ºletenk√©nti oszt√°lyoz√°s
    result_img = result['original_image'].copy()
    
    for building in result['individual_buildings']:
        x, y, w, h = building['bbox']
        color = BUILDING_COLORS.get(building['type'], [255, 255, 255])
        
        # Bounding box rajzol√°sa
        cv2.rectangle(result_img, (x, y), (x + w, y + h), color, 2)
        
        # C√≠mke
        label = f"{building['type']} ({building['population']} f≈ë)"
        cv2.putText(result_img, label, (x, max(y-10, 10)), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.4, color, 1)
    
    axes[1,0].imshow(result_img)
    axes[1,0].set_title(f'√âp√ºletenk√©nti oszt√°lyoz√°s - √ñsszesen: {result["total_population"]:.0f} f≈ë')
    axes[1,0].axis('off')
    
    # Statisztika
    building_types = [b['type'] for b in result['individual_buildings']]
    type_counts = {typ: building_types.count(typ) for typ in set(building_types)}
    
    if type_counts:
        colors = [BUILDING_COLORS.get(typ, [0.5, 0.5, 0.5]) for typ in type_counts.keys()]
        # Normaliz√°l√°s matplotlib sz√°m√°ra
        colors = [[c[0]/255, c[1]/255, c[2]/255] for c in colors]
        
        axes[1,1].bar(type_counts.keys(), type_counts.values(), color=colors)
        axes[1,1].set_title('√âp√ºlett√≠pusok eloszl√°sa')
        axes[1,1].set_ylabel('Darabsz√°m')
        axes[1,1].tick_params(axis='x', rotation=45)
    else:
        axes[1,1].text(0.5, 0.5, 'Nincs √©p√ºlet', ha='center', va='center', transform=axes[1,1].transAxes)
        axes[1,1].set_title('√âp√ºlett√≠pusok eloszl√°sa')
    
    plt.tight_layout()
    
    # K√©p konvert√°l√°sa Streamlit sz√°m√°ra
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

# ===============================
# STREAMLIT FEL√úLET
# ===============================

def main():
    # Fejl√©c
    st.title("üè† √âp√ºlet Analiz√°tor - Lakoss√°gi Becsl√©s")
    st.markdown("""
    Ez az alkalmaz√°s automatikusan detekt√°lja az √©p√ºleteket m≈±holdk√©peken √©s becs√ºli a lakoss√°g sz√°m√°t 
    √©p√ºlett√≠pusonk√©nt a KSH adatok alapj√°n.
    """)
    
    # Oldals√°v
    st.sidebar.title("‚öôÔ∏è Be√°ll√≠t√°sok")
    
    # Pixel-m√©ter √°tv√°lt√°s
    pixel_to_meter = st.sidebar.slider(
        "Pixel-m√©ter √°tv√°lt√°s",
        min_value=0.1,
        max_value=2.0,
        value=0.5,
        step=0.1,
        help="Egy pixel h√°ny m√©tert reprezent√°l a val√≥s√°gban"
    )
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### √âp√ºlett√≠pus inform√°ci√≥k")
    
    for building_type, population in BUILDING_TYPE_POPULATION.items():
        color = BUILDING_COLORS.get(building_type, [255, 255, 255])
        color_hex = '#{:02x}{:02x}{:02x}'.format(color[0], color[1], color[2])
        
        if population > 0:
            st.sidebar.markdown(
                f"<span style='color:{color_hex}; font-weight:bold'>{building_type}</span>: "
                f"{population} f≈ë/alap√©rt√©k", 
                unsafe_allow_html=True
            )
        else:
            st.sidebar.markdown(
                f"<span style='color:{color_hex}; font-weight:bold'>{building_type}</span>: "
                f"nem lak√≥√©p√ºlet", 
                unsafe_allow_html=True
            )
    
    # F≈ë tartalom
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üì§ K√©p felt√∂lt√©se")
        uploaded_file = st.file_uploader(
            "T√∂lts fel egy m≈±holdk√©pet",
            type=['jpg', 'jpeg', 'png'],
            help="A k√©p tartalmazhat √©p√ºleteket, prefer√°ltan v√°rosi k√∂rnyezetben"
        )
        
        if uploaded_file is not None:
            # K√©p megjelen√≠t√©se
            image = Image.open(uploaded_file)
            st.image(image, caption="Felt√∂lt√∂tt k√©p", use_column_width=True)
            
            # Elemz√©s gomb
            if st.button("üéØ K√©p elemz√©se", type="primary", use_container_width=True):
                with st.spinner("Modell bet√∂lt√©se √©s k√©p elemz√©se..."):
                    # Modell bet√∂lt√©se
                    model = load_model()
                    
                    if model is None:
                        st.error("A modell nem t√∂lthet≈ë be. Ellen≈ërizze, hogy a 'final_multi_task_model.h5' f√°jl el√©rhet≈ë-e.")
                        return
                    
                    # K√©p elemz√©se
                    result = analyze_image_with_model(model, image, pixel_to_meter)
                    
                    if result['success']:
                        # Eredm√©nyek megjelen√≠t√©se
                        with col2:
                            st.subheader("üìä Elemz√©s eredm√©nye")
                            
                            # Statisztik√°k
                            st.metric("√ñsszes √©p√ºlet", result['building_count'])
                            st.metric("Becs√ºlt lakoss√°g", f"{result['total_population']:.0f} f≈ë")
                            st.metric("Feldolgoz√°si id≈ë", f"{result['inference_time']:.2f} m√°sodperc")
                            
                            # R√©szletes statisztik√°k
                            st.subheader("üìà R√©szletes statisztik√°k")
                            
                            # √âp√ºlett√≠pus statisztik√°k
                            type_stats = {}
                            for building in result['individual_buildings']:
                                b_type = building['type']
                                if b_type not in type_stats:
                                    type_stats[b_type] = {'count': 0, 'total_area': 0, 'total_population': 0}
                                
                                type_stats[b_type]['count'] += 1
                                type_stats[b_type]['total_area'] += building['area_m2']
                                type_stats[b_type]['total_population'] += building['population']
                            
                            for b_type, stats in type_stats.items():
                                color = BUILDING_COLORS.get(b_type, [255, 255, 255])
                                color_hex = '#{:02x}{:02x}{:02x}'.format(color[0], color[1], color[2])
                                
                                st.markdown(f"**<span style='color:{color_hex}'>{b_type}</span>**", unsafe_allow_html=True)
                                col_a, col_b, col_c = st.columns(3)
                                with col_a:
                                    st.metric("Darabsz√°m", stats['count'])
                                with col_b:
                                    st.metric("Ter√ºlet", f"{stats['total_area']:.0f} m¬≤")
                                with col_c:
                                    st.metric("Lakoss√°g", f"{stats['total_population']:.0f} f≈ë")
                            
                            # Vizu√°lis eredm√©nyek
                            st.subheader("üñºÔ∏è Vizu√°lis elemz√©s")
                            visualization = create_visualization(result)
                            st.image(visualization, caption="R√©szletes elemz√©s eredm√©nye", use_column_width=True)
                            
                            # Eredm√©nyek let√∂lt√©se
                            st.subheader("üíæ Eredm√©nyek export√°l√°sa")
                            
                            # CSV export
                            import pandas as pd
                            df = pd.DataFrame(result['individual_buildings'])
                            csv = df.to_csv(index=False)
                            
                            st.download_button(
                                label="üì• Eredm√©nyek let√∂lt√©se (CSV)",
                                data=csv,
                                file_name="epulet_elemzes.csv",
                                mime="text/csv",
                                use_container_width=True
                            )
                            
                            # K√©p export
                            st.download_button(
                                label="üì• Vizu√°lis elemz√©s let√∂lt√©se (PNG)",
                                data=visualization,
                                file_name="epulet_elemzes.png",
                                mime="image/png",
                                use_container_width=True
                            )
                    
                    else:
                        st.error(f"Elemz√©si hiba: {result['error']}")
    
    # Inform√°ci√≥k, ha nincs felt√∂lt√∂tt k√©p
    if uploaded_file is None:
        with col2:
            st.info("üëÜ K√©rj√ºk, t√∂lts√∂n fel egy k√©pet az elemz√©shez")
            
            st.subheader("‚ÑπÔ∏è Haszn√°lati √∫tmutat√≥")
            st.markdown("""
            1. **K√©p felt√∂lt√©se**: A bal oldali panelen t√∂lts√∂n fel egy m≈±holdk√©pet
            2. **Be√°ll√≠t√°sok**: √Åll√≠tsa be a pixel-m√©ter √°tv√°lt√°si ar√°nyt
            3. **Elemz√©s**: Kattintson a 'K√©p elemz√©se' gombra
            4. **Eredm√©nyek**: N√©zze meg a jobb oldali panelen az eredm√©nyeket
            
            **Aj√°nlott k√©pt√≠pusok:**
            - M≈±holdk√©pek v√°rosi ter√ºletekr≈ël
            - JPG vagy PNG form√°tum
            - Minimum felbont√°s: 256x256 pixel
            - Vil√°gos, kontrasztos k√©pek
            """)
            
            st.subheader("üéØ √âp√ºlett√≠pusok")
            for building_type, color in BUILDING_COLORS.items():
                color_hex = '#{:02x}{:02x}{:02x}'.format(color[0], color[1], color[2])
                st.markdown(
                    f"<span style='color:{color_hex}; font-weight:bold'>‚ñ†</span> {building_type}",
                    unsafe_allow_html=True
                )

# Alkalmaz√°s ind√≠t√°sa
if __name__ == "__main__":
    main()
